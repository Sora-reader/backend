# Compose for development using volumes to ensure hot reload
version: "3"

services:
  web:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    expose:
      - 8000
    environment:
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - DATABASE_URL=postgres://$POSTGRES_USER:POSTGRES_PASSWORD@db:5432/sora
    ports:
      - "8888:8000"
    volumes:
      - ./:/app
      # exclude dotenvs in volume
      - /app/.envs
    env_file:
      - ./.envs/docker.env
    depends_on:
      - db
      - redis

  db:
    restart: unless-stopped
    image: postgres:12
    ports:
      - "8882:5432"
    volumes:
      - sora_postgres:/var/lib/postgresql/data
    env_file:
      - .envs/docker.env
    healthcheck:
      # Wait for postgres to actually start before consider service 'healthy'
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s

  redis:
    image: redis
    command: redis-server
    restart: unless-stopped
    expose:
      - 6379
    ports:
      - "8883:6379"
    volumes:
      - sora_redis:/var/lib/redis
      - sora_redis:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1m
      timeout: 5s

  elasticsearch:
    image: elasticsearch:7.14.2
    restart: unless-stopped
    environment:
      - discovery.type=single-node
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 2048M

volumes:
  esdata1:
  sora_redis:
  sora_postgres:
