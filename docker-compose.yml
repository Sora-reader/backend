# Compose for development using volumes to ensure hot reload
#version: "3"

services:
  web:
    profiles:
      - app
    build:
      context: .
      dockerfile: docker/web/Dockerfile.dev
    expose:
      - 8000
    environment:
      - DEBUG
      - ALLOWED_HOSTS
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-sora}
      - SECRET_KEY=${SECRET_KEY:-DevServer}
      # Static
      - HOST=0.0.0.0
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_HOST=elasticsearch:9200
    ports:
      - "${PORT:-8888}:8000"
    volumes:
      - ./:/app
      - sora_poetry:/home/sora/.cache/pypoetry
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8000/api/health" ]
      interval: 5s
      timeout: 5s

  celery:
    profiles:
      - app
    image: backend_web
    command: poetry run celery -A manga_reader worker -l INFO
    environment:
      - DEBUG
      - PROXY
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-sora}
      - SECRET_KEY=${SECRET_KEY:-DevServer}
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_HOST=elasticsearch:9200
    volumes:
      - ./:/app
      - sora_poetry:/home/sora/.cache/pypoetry
    depends_on:
      - web
    healthcheck:
      test: poetry run celery -A manga_reader status
      interval: 5s
      timeout: 5s

  db:
    profiles:
      - data
      - app
    restart: unless-stopped
    image: postgres:12
    ports:
      - "8882:5432"
    volumes:
      - sora_postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sora}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    healthcheck:
      # Wait for postgres to actually start before consider service 'healthy'
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s

  redis:
    profiles:
      - data
      - app
    image: redis
    command: redis-server
    restart: unless-stopped
    expose:
      - 6379
    ports:
      - "8883:6379"
    volumes:
      - sora_redis:/var/lib/redis
      - sora_redis:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s

  elasticsearch:
    profiles:
      - data
      - app
    image: elasticsearch:7.14.2
    restart: unless-stopped
    environment:
      - discovery.type=single-node
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
        test: [ "CMD", "curl", "http://localhost:9200/_cat/health" ]
        interval: 5s
        timeout: 5s
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 4096M

volumes:
  esdata1:
  sora_poetry:
  sora_redis:
  sora_postgres:
